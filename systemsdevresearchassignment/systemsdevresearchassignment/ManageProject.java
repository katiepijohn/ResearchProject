/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package systemsdevresearchassignment;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import java.util.ArrayList;


/**
 *
 * @author katie.pijohn
 */
public class ManageProject extends javax.swing.JFrame {
    int currentProjects = 0;
    ArrayList<Project> projects = new ArrayList<Project>();
    DefaultComboBoxModel assignedResearcherModel = new DefaultComboBoxModel();
    
    
    

    /**
     * Creates new form ManageProject
     */
    public ManageProject() {
        initComponents();
        refreshData();
        
    }
    public void refreshData(){
        try{
            projects.clear();
            
            String sqlGetProjects = "SELECT * FROM tblProjects";
            String sqlGetAssignedResearcher = "SELECT id, assignedResearcher FROM tblProjects";
            
            Connection conn = DBConnection.Connect();
            
            PreparedStatement psGetProjects = conn.prepareStatement(sqlGetProjects);
            PreparedStatement psGetAssignedResearcher = conn.prepareStatement(sqlGetAssignedResearcher);
            
            ResultSet rs = psGetProjects.executeQuery();
            
            while(rs.next()){
                Project p = new Project(rs.getInt("id"), rs.getString("name"), rs.getInt("totalcost"), rs.getString("notes"), rs.getString("assignedResearcher"));
                projects.add(p);
            }
            
            rs = psGetAssignedResearcher.executeQuery();
            
            this.cmbxAssignedResearcher.removeAllItems();
            
            while(rs.next()){
                assignedResearcherModel.addElement(new ComboBoxItem(rs.getInt("id"), rs.getString("assignedResearcher")));
                
                
            }
            for (int i = 0; i < assignedResearcherModel.getSize(); i++){
                ComboBoxItem o = (ComboBoxItem)assignedResearcherModel.getElementAt(i);
                if(o.getId() == projects.get(currentProjects).getId()){
                    assignedResearcherModel.setSelectedItem(o);
                }
                
            
        }
            this.cmbxAssignedResearcher.setModel(assignedResearcherModel);
            this.lblID.setText(String.valueOf(projects.get(currentProjects).getId()));
            this.txtProjectName.setText(projects.get(currentProjects).getName());
            this.txtNotes.setText(projects.get(currentProjects).getNotes());
            this.txtTotalCost.setText(String.valueOf(projects.get(currentProjects).getTotalCost()));
            
            conn.close();
              
        }
        catch(Exception e){
            
            JOptionPane.showMessageDialog(null, "Cannot get Projects!\n\nError"+e);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblViewProjects = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        btnViewTasks = new javax.swing.JButton();
        lblProjectName = new javax.swing.JLabel();
        lblTotalCost = new javax.swing.JLabel();
        bxProjectComplete = new javax.swing.JCheckBox();
        lblNotes = new javax.swing.JLabel();
        btnDeleteNote = new javax.swing.JButton();
        lblAssignedResearcher = new javax.swing.JLabel();
        cmbxAssignedResearcher = new javax.swing.JComboBox<>();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtProjectName = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNotes = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtTotalCost = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(142, 90, 196));

        lblViewProjects.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        lblViewProjects.setText("View Projects");

        btnLogout.setBackground(new java.awt.Color(235, 197, 246));
        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        lblID.setText("Project ID:");

        btnViewTasks.setBackground(new java.awt.Color(235, 197, 246));
        btnViewTasks.setText("View Tasks");
        btnViewTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTasksActionPerformed(evt);
            }
        });

        lblProjectName.setText("Project");

        lblTotalCost.setText("Total Cost");

        bxProjectComplete.setText("Project Complete");
        bxProjectComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bxProjectCompleteActionPerformed(evt);
            }
        });

        lblNotes.setText("Notes");

        btnDeleteNote.setBackground(new java.awt.Color(235, 197, 246));
        btnDeleteNote.setText("Delete Note");
        btnDeleteNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteNoteActionPerformed(evt);
            }
        });

        lblAssignedResearcher.setText("Assigned Researcher");

        cmbxAssignedResearcher.setBackground(new java.awt.Color(235, 197, 246));
        cmbxAssignedResearcher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnPrevious.setText("<");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setText(">");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(235, 197, 246));
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtProjectName.setBackground(new java.awt.Color(235, 152, 235));
        txtProjectName.setColumns(20);
        txtProjectName.setRows(5);
        jScrollPane1.setViewportView(txtProjectName);

        txtNotes.setBackground(new java.awt.Color(235, 152, 235));
        txtNotes.setColumns(20);
        txtNotes.setRows(5);
        jScrollPane2.setViewportView(txtNotes);

        txtTotalCost.setBackground(new java.awt.Color(235, 152, 235));
        txtTotalCost.setColumns(20);
        txtTotalCost.setRows(5);
        jScrollPane3.setViewportView(txtTotalCost);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnViewTasks)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(186, 186, 186)
                            .addComponent(lblViewProjects))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(lblProjectName))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(153, 153, 153)
                            .addComponent(btnFirst)
                            .addGap(18, 18, 18)
                            .addComponent(btnPrevious)
                            .addGap(18, 18, 18)
                            .addComponent(btnNext)
                            .addGap(18, 18, 18)
                            .addComponent(btnLast, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(121, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(bxProjectComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblTotalCost)
                                            .addGap(166, 166, 166)))
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAssignedResearcher, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbxAssignedResearcher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(lblNotes)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnDeleteNote))
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(lblID)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(btnLogout))
                .addGap(10, 10, 10)
                .addComponent(lblViewProjects)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProjectName)
                    .addComponent(bxProjectComplete)
                    .addComponent(lblNotes)
                    .addComponent(btnDeleteNote))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAssignedResearcher, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblTotalCost))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbxAssignedResearcher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(btnViewTasks))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrevious)
                    .addComponent(btnNext)
                    .addComponent(btnLast)
                    .addComponent(btnFirst))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        Login am = new Login();
        am.setVisible(true);
        this.dispose();  
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnDeleteNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteNoteActionPerformed
                int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this note?\n\nThis cannot be undone", "Warning!", JOptionPane.YES_NO_OPTION);
        if(reply == JOptionPane.YES_OPTION){
            try{
                Connection conn = DBConnection.Connect();
                
                String sqlDelete = "DELETE FROM tblProjects WHERE notes=?";
                PreparedStatement pStatement = conn.prepareStatement(sqlDelete);
                pStatement.setString(1, this.txtNotes.getText());
                
                pStatement.executeUpdate();
                JOptionPane.showMessageDialog(null, "Note has been closed successfuly!");
                
                conn.close();
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Cannot delete note\n\nError"+ e);
            }
                    currentProjects =0;
                    this.refreshData();
        }
        else{
            JOptionPane.showMessageDialog(null, "Note has not been deleted!");
            
        }

    
    }//GEN-LAST:event_btnDeleteNoteActionPerformed

    private void btnViewTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTasksActionPerformed
        Tasks am = new Tasks();
        am.setVisible(true);
        this.dispose(); 
    }//GEN-LAST:event_btnViewTasksActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
            if(currentProjects !=0){
            currentProjects--;
            //refresh combobox choice
            //update labels
            for(int i = 0; i < assignedResearcherModel.getSize(); i++){
            ComboBoxItem o = (ComboBoxItem)assignedResearcherModel.getElementAt(i);
            if(o.getId() == projects.get(currentProjects).getId()){
                assignedResearcherModel.setSelectedItem(o);
            }
            
                    }
            this.cmbxAssignedResearcher.setModel(assignedResearcherModel);
            this.lblID.setText(String.valueOf(projects.get(currentProjects).getId()));
            this.txtProjectName.setText(projects.get(currentProjects).getName());
            this.txtNotes.setText(projects.get(currentProjects).getNotes());
            this.txtTotalCost.setText(String.valueOf(projects.get(currentProjects).getTotalCost()));
        }
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if(currentProjects !=projects.size()-1){
            currentProjects++;
            //refresh combobox choice
            //update labels
            for(int i = 0; i < assignedResearcherModel.getSize(); i++){
            ComboBoxItem o = (ComboBoxItem)assignedResearcherModel.getElementAt(i);
            if(o.getId() == projects.get(currentProjects).getId()){
                assignedResearcherModel.setSelectedItem(o);
            }
            
                    }
            this.cmbxAssignedResearcher.setModel(assignedResearcherModel);
            this.lblID.setText(String.valueOf(projects.get(currentProjects).getId()));
            this.txtProjectName.setText(projects.get(currentProjects).getName());
            this.txtNotes.setText(projects.get(currentProjects).getNotes());
            this.txtTotalCost.setText(String.valueOf(projects.get(currentProjects).getTotalCost()));
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
            if(currentProjects !=projects.size()-1){
            currentProjects = projects.size()-1;
            //refresh combobox choice
            //update labels
            for(int i = 0; i < assignedResearcherModel.getSize(); i++){
            ComboBoxItem o = (ComboBoxItem)assignedResearcherModel.getElementAt(i);
            if(o.getId() == projects.get(currentProjects).getId()){
                assignedResearcherModel.setSelectedItem(o);
            }
            
                    }
            this.cmbxAssignedResearcher.setModel(assignedResearcherModel);
            this.lblID.setText(String.valueOf(projects.get(currentProjects).getId()));
            this.txtProjectName.setText(projects.get(currentProjects).getName());
            this.txtNotes.setText(projects.get(currentProjects).getNotes());
            this.txtTotalCost.setText(String.valueOf(projects.get(currentProjects).getTotalCost()));
        }
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
                if(currentProjects !=0){
            currentProjects=0;
            //refresh combobox choice
            //update labels
            for(int i = 0; i < assignedResearcherModel.getSize(); i++){
            ComboBoxItem o = (ComboBoxItem)assignedResearcherModel.getElementAt(i);
            if(o.getId() == projects.get(currentProjects).getId()){
                assignedResearcherModel.setSelectedItem(o);
            }
            
                    }
            this.cmbxAssignedResearcher.setModel(assignedResearcherModel);
            this.lblID.setText(String.valueOf(projects.get(currentProjects).getId()));
            this.txtProjectName.setText(projects.get(currentProjects).getName());
            this.txtNotes.setText(projects.get(currentProjects).getNotes());
            this.txtTotalCost.setText(String.valueOf(projects.get(currentProjects).getTotalCost()));
        }
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try{
            ComboBoxItem assignedResearcher = (ComboBoxItem)assignedResearcherModel.getSelectedItem();
            
            Connection conn = DBConnection.Connect();
            
            String sqlUpdate = "UPDATE tblProjects SET name=?, totalcost=?, notes=?, assignedResearcher=? WHERE id=?";
            PreparedStatement pStatement = conn.prepareStatement(sqlUpdate);
            pStatement.setString(1, this.txtProjectName.getText());
            pStatement.setString(2, String.valueOf(txtTotalCost.getText()));
            pStatement.setString(3, this.txtNotes.getText());
            pStatement.setString(4, String.valueOf(assignedResearcher.getId()));
            pStatement.setString(5, String.valueOf(projects.get(currentProjects).getId()));
            
            pStatement.executeUpdate();
            JOptionPane.showMessageDialog(null, "Save successful!");
            
            conn.close();
            
            
        }
        catch( Exception e){
            JOptionPane.showMessageDialog(null, "Cannot save project\n\nError" +e);
        }
        this.refreshData();
        
       
    }//GEN-LAST:event_btnSaveActionPerformed

    private void bxProjectCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bxProjectCompleteActionPerformed
        int reply = JOptionPane.showConfirmDialog(null, "Do you want to mark this project as complete?\n\nThis will be sent to the Head Researcher to confirm and close the project", "Warning!", JOptionPane.YES_NO_OPTION);
        if(reply == JOptionPane.YES_OPTION){
            try{
                
                Connection conn = DBConnection.Connect();
                
                ComboBoxItem assignedResearcher = (ComboBoxItem)assignedResearcherModel.getSelectedItem();
                
            String sqlInsert = "INSERT INTO tblClosedProjects (name, totalcost, notes, assignedResearcher) VALUES (?,?,?,?)";
    
         PreparedStatement pStatement = conn.prepareStatement(sqlInsert);
         pStatement.setString(1, this.txtProjectName.getText());
         pStatement.setString(2, this.txtTotalCost.getText());
         pStatement.setString(3, this.txtNotes.getText());
         pStatement.setString(4, String.valueOf(assignedResearcher.getId()));
     
      
      pStatement.executeUpdate();

                JOptionPane.showMessageDialog(null, "Project has been sent to the Head Researcher!");
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(null, "Cannot mark project as complete\n\nError"+ e);
            }
                    currentProjects =0;
                    this.refreshData();
        }
        else{
            JOptionPane.showMessageDialog(null, "Project has not been marked as complete!");
            
        }  
    }//GEN-LAST:event_bxProjectCompleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageProject.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageProject().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteNote;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnViewTasks;
    private javax.swing.JCheckBox bxProjectComplete;
    private javax.swing.JComboBox<String> cmbxAssignedResearcher;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAssignedResearcher;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblNotes;
    private javax.swing.JLabel lblProjectName;
    private javax.swing.JLabel lblTotalCost;
    private javax.swing.JLabel lblViewProjects;
    private javax.swing.JTextArea txtNotes;
    private javax.swing.JTextArea txtProjectName;
    private javax.swing.JTextArea txtTotalCost;
    // End of variables declaration//GEN-END:variables
}
